AWSTemplateFormatVersion: 2010-09-09
Description: This template will create public subnet, public route table and associate that route table to public subnet
Resources:
# Public subnet
  publicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      VpcId: !ImportValue exportCustommyVPC
      CidrBlock: 10.0.0.0/25
      Tags:
        - Key: Name
          Value: publicSubnet
  publicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue exportCustommyVPC
      Tags:
        - Key: Name
          Value: routetable
  publicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref publicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !ImportValue customInternetGateway
  publicSubnetouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref publicSubnet
      RouteTableId: !Ref publicRouteTable

# Private subnet
  privateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !ImportValue exportCustommyVPC
      CidrBlock: 10.0.0.128/25
      Tags:
        - Key: Name
          Value: privateSubnet
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !ImportValue exportCustommyVPC
      Tags:
        - Key: Name
          Value: privateRouteTable
  privateRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet
      RouteTableId: !Ref privateRouteTable
  eipFoNateGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  natGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId: !GetAtt eipFoNateGateway.AllocationId
      SubnetId: !Ref publicSubnet
      Tags:
      - Key: Name
        Value: natGateway
  routeName:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref privateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref natGateway
# network
  myNetworkAcl:
      Type: AWS::EC2::NetworkAcl
      Properties:
         VpcId: !ImportValue exportCustommyVPC
         Tags:
         - Key: name
           Value: myNetworkAcl
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref  myNetworkAcl
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 172.16.0.0/24
       PortRange:
         From: 22
         To: 22
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref  myNetworkAcl
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
  mySubnetNetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId: !Ref publicSubnet
       NetworkAclId: !Ref myNetworkAcl


Outputs:
# public output
  outputpublicSubnet:
    Description: Created public subnet
    Value: !Ref publicSubnet
    Export: 
      Name: customPublicSubnet
# private output
  outputprivateSubnet:
    Description: Created private subnet
    Value: !Ref privateSubnet
    Export: 
      Name: customPrivateSubnet
# gatewats
  outputnatGateway:
    Description: Created natGateway
    Value: !Ref natGateway
    Export: 
      Name: customnatGateway
  outputeipFoNateGateway:
    Description: Created eipFoNateGateway
    Value: !Ref eipFoNateGateway
    Export: 
      Name: customeipFoNateGateway
  outputmyNetworkAcl:
    Description: Created myNetworkAcl
    Value: !Ref myNetworkAcl
    Export: 
      Name: customemyNetworkAcl